// Nature - 8x8.me fill patterns
// This work is dedicated to the Public Domain by ACED, licensed under CC0
// https://creativecommons.org/publicdomain/zero/1.0/

#pragma once
#include <stdint.h> // For uint8_t type
#include <avr/pgmspace.h> // For AVR progmem storage


namespace patterns {

    constexpr uint8_t scalesSparse[] PROGMEM {
        8, 8, //  8x8 px image
        0x3C, //  ▓▓░░░░▓▓
        0x99, //  ░▓▓░░▓▓░
        0xC3, //  ░░▓▓▓▓░░
        0xE3, //  ░░░▓▓▓░░
        0xC3, //  ░░▓▓▓▓░░
        0x99, //  ░▓▓░░▓▓░
        0x3C, //  ▓▓░░░░▓▓
        0x3E, //  ▓▓░░░░░▓
    };
    // Magic: ~"\303f<\34<f\303\301"[i%8]

    constexpr uint8_t scales[] PROGMEM {
        8, 8, //  8x8 px image
        0xBD, //  ░▓░░░░▓░
        0xBB, //  ░▓░░░▓░░
        0xDB, //  ░░▓░░▓░░
        0xE3, //  ░░░▓▓▓░░
        0xDB, //  ░░▓░░▓░░
        0xBB, //  ░▓░░░▓░░
        0xBD, //  ░▓░░░░▓░
        0x3E, //  ▓▓░░░░░▓
    };
    // Magic: ~"BD$\34$DB\301"[i%8]

    constexpr uint8_t scallop[] PROGMEM {
        8, 8, //  8x8 px image
        0xAD, //  ░▓░▓░░▓░
        0x33, //  ▓▓░░▓▓░░
        0xDA, //  ░░▓░░▓░▓
        0xA2, //  ░▓░▓▓▓░▓
        0xDA, //  ░░▓░░▓░▓
        0x33, //  ▓▓░░▓▓░░
        0xAD, //  ░▓░▓░░▓░
        0x2A, //  ▓▓░▓░▓░▓
    };
    // Magic: ~"R\314%]%\314R\325"[i%8]

    constexpr uint8_t scalesLargeDexter[] PROGMEM {
        8, 8, //  8x8 px image
        0x78, //  ▓░░░░▓▓▓
        0xA7, //  ░▓░▓▓░░░
        0xDF, //  ░░▓░░░░░
        0xBF, //  ░▓░░░░░░
        0xBF, //  ░▓░░░░░░
        0x7F, //  ▓░░░░░░░
        0x7F, //  ▓░░░░░░░
        0x7F, //  ▓░░░░░░░
    };
    // Magic: 66+"6e\235}}==="[i%8]

    constexpr uint8_t scalesLargeSinister[] PROGMEM {
        8, 8, //  8x8 px image
        0x7F, //  ▓░░░░░░░
        0x7F, //  ▓░░░░░░░
        0x7F, //  ▓░░░░░░░
        0xBF, //  ░▓░░░░░░
        0xBF, //  ░▓░░░░░░
        0xDF, //  ░░▓░░░░░
        0xA7, //  ░▓░▓▓░░░
        0x78, //  ▓░░░░▓▓▓
    };
    // Magic: 66+"===}}\235e6"[i%8]

    constexpr uint8_t papillon[] PROGMEM {
        8, 8, //  8x8 px image
        0x70, //  ▓░░░▓▓▓▓
        0xFC, //  ░░░░░░▓▓
        0xFE, //  ░░░░░░░▓
        0xBE, //  ░▓░░░░░▓
        0x6F, //  ▓░░▓░░░░
        0x5F, //  ▓░▓░░░░░
        0x37, //  ▓▓░░▓░░░
        0x0E, //  ▓▓▓▓░░░▓
    };
    // Magic: "p\374\376\276o_7\16"[i%8]

    constexpr uint8_t loam[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x04, //  ▓▓▓▓▓░▓▓
        0x40, //  ▓░▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "@@AP@@D"[i%8]*4

    constexpr uint8_t sand[] PROGMEM {
        8, 8, //  8x8 px image
        0x02, //  ▓▓▓▓▓▓░▓
        0x24, //  ▓▓░▓▓░▓▓
        0x40, //  ▓░▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x08, //  ▓▓▓▓░▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x80, //  ░▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: 97^"cE!aiq\341a"[i%8]

    constexpr uint8_t patch[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x42, //  ▓░▓▓▓▓░▓
        0x04, //  ▓▓▓▓▓░▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "#Ce'#C3#"[i%8]-35

    constexpr uint8_t divot[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x05, //  ▓▓▓▓▓░▓░
        0x02, //  ▓▓▓▓▓▓░▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x50, //  ▓░▓░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: 97^"adcaaA1a"[i%8]

    constexpr uint8_t grass[] PROGMEM {
        8, 8, //  8x8 px image
        0x20, //  ▓▓░▓▓▓▓▓
        0x40, //  ▓░▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x02, //  ▓▓▓▓▓▓░▓
        0x04, //  ▓▓▓▓▓░▓▓
        0x02, //  ▓▓▓▓▓▓░▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: " @ \0\2\4\2"[i%8]

    constexpr uint8_t grassMini[] PROGMEM {
        8, 8, //  8x8 px image
        0x22, //  ▓▓░▓▓▓░▓
        0x44, //  ▓░▓▓▓░▓▓
        0x22, //  ▓▓░▓▓▓░▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x22, //  ▓▓░▓▓▓░▓
        0x44, //  ▓░▓▓▓░▓▓
        0x22, //  ▓▓░▓▓▓░▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "\"D\""[i%4]
    // GAMBY: 0x2420

    constexpr uint8_t field[] PROGMEM {
        8, 8, //  8x8 px image
        0x60, //  ▓░░▓▓▓▓▓
        0x06, //  ▓▓▓▓▓░░▓
        0x70, //  ▓░░░▓▓▓▓
        0x07, //  ▓▓▓▓▓░░░
        0x60, //  ▓░░▓▓▓▓▓
        0x06, //  ▓▓▓▓▓░░▓
        0x70, //  ▓░░░▓▓▓▓
        0x07, //  ▓▓▓▓▓░░░
    };
    // Magic: "`\6p\a"[i%4]

    constexpr uint8_t fieldSparse[] PROGMEM {
        8, 8, //  8x8 px image
        0x60, //  ▓░░▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x70, //  ▓░░░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x06, //  ▓▓▓▓▓░░▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x07, //  ▓▓▓▓▓░░░
    };
    // Magic: 88^"8X(XX^X_"[i%8]

    constexpr uint8_t pasture[] PROGMEM {
        8, 8, //  8x8 px image
        0x60, //  ▓░░▓▓▓▓▓
        0x06, //  ▓▓▓▓▓░░▓
        0x60, //  ▓░░▓▓▓▓▓
        0x06, //  ▓▓▓▓▓░░▓
        0x30, //  ▓▓░░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: 65^"!G!GqAqA"[i%8]

    constexpr uint8_t daisies[] PROGMEM {
        8, 8, //  8x8 px image
        0x08, //  ▓▓▓▓░▓▓▓
        0x14, //  ▓▓▓░▓░▓▓
        0x08, //  ▓▓▓▓░▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x50, //  ▓░▓░▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: 99^"kwkcC3Cc"[i%8]

    constexpr uint8_t tuffet[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x40, //  ▓░▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x60, //  ▓░░▓▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "@HP@XD@"[i%8]*4

    constexpr uint8_t shrub[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x18, //  ▓▓▓░░▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "@DHFHD@"[i%8]*4

    constexpr uint8_t sprout[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x18, //  ▓▓▓░░▓▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x18, //  ▓▓▓░░▓▓▓
        0x0C, //  ▓▓▓▓░░▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "@FL@FC@"[i%8]*4

    constexpr uint8_t crop[] PROGMEM {
        8, 8, //  8x8 px image
        0x20, //  ▓▓░▓▓▓▓▓
        0x60, //  ▓░░▓▓▓▓▓
        0x4C, //  ▓░▓▓░░▓▓
        0x18, //  ▓▓▓░░▓▓▓
        0x40, //  ▓░▓▓▓▓▓▓
        0x60, //  ▓░░▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "HXSFPXH"[i%8]*4

    constexpr uint8_t bush[] PROGMEM {
        8, 8, //  8x8 px image
        0x10, //  ▓▓▓░▓▓▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x66, //  ▓░░▓▓░░▓
        0x0C, //  ▓▓▓▓░░▓▓
        0x70, //  ▓░░░▓▓▓▓
        0x18, //  ▓▓▓░░▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: 72^"Xx.D8PHH"[i%8]

    constexpr uint8_t leaves[] PROGMEM {
        8, 8, //  8x8 px image
        0x20, //  ▓▓░▓▓▓▓▓
        0x60, //  ▓░░▓▓▓▓▓
        0x43, //  ▓░▓▓▓▓░░
        0x06, //  ▓▓▓▓▓░░▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x18, //  ▓▓▓░░▓▓▓
        0x0C, //  ▓▓▓▓░░▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: " `C\6\0\30\f"[i%8]

    constexpr uint8_t overgrowth[] PROGMEM {
        8, 8, //  8x8 px image
        0x30, //  ▓▓░░▓▓▓▓
        0x73, //  ▓░░░▓▓░░
        0x67, //  ▓░░▓▓░░░
        0x04, //  ▓▓▓▓▓░▓▓
        0x80, //  ░▓▓▓▓▓▓▓
        0xEC, //  ░░░▓░░▓▓
        0x6E, //  ▓░░▓░░░▓
        0x06, //  ▓▓▓▓▓░░▓
    };
    // Magic: 4+",oc\0|\350j\2"[i%8]

    constexpr uint8_t thicket[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x48, //  ▓░▓▓░▓▓▓
        0x50, //  ▓░▓░▓▓▓▓
        0x6C, //  ▓░░▓░░▓▓
        0x50, //  ▓░▓░▓▓▓▓
        0x48, //  ▓░▓▓░▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "\0HPlPH\0"[i%8]

    constexpr uint8_t tree[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x28, //  ▓▓░▓░▓▓▓
        0x14, //  ▓▓▓░▓░▓▓
        0xEA, //  ░░░▓░▓░▓
        0x14, //  ▓▓▓░▓░▓▓
        0x28, //  ▓▓░▓░▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: 65^"AiU\253UiAA"[i%8]

    constexpr uint8_t rocks[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: " $&& $ "[i%8]*8

    constexpr uint8_t mounds[] PROGMEM {
        8, 8, //  8x8 px image
        0x02, //  ▓▓▓▓▓▓░▓
        0x41, //  ▓░▓▓▓▓▓░
        0x21, //  ▓▓░▓▓▓▓░
        0x22, //  ▓▓░▓▓▓░▓
        0x48, //  ▓░▓▓░▓▓▓
        0x04, //  ▓▓▓▓▓░▓▓
        0x04, //  ▓▓▓▓▓░▓▓
        0x08, //  ▓▓▓▓░▓▓▓
    };
    // Magic: 96^"b!AB(ddh"[i%8]

    constexpr uint8_t skull[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x28, //  ▓▓░▓░▓▓▓
        0x18, //  ▓▓▓░░▓▓▓
        0x28, //  ▓▓░▓░▓▓▓
        0x80, //  ░▓▓▓▓▓▓▓
        0x40, //  ▓░▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "@LJFJ`P"[i%8]*4

    constexpr uint8_t skullLarge[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x4C, //  ▓░▓▓░░▓▓
        0x96, //  ░▓▓░▓░░▓
        0x0E, //  ▓▓▓▓░░░▓
        0x16, //  ▓▓▓░▓░░▓
        0x0C, //  ▓▓▓▓░░▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
    };
    // Magic: 99^"c/\365muoCs"[i%8]

    constexpr uint8_t skullXL[] PROGMEM {
        8, 8, //  8x8 px image
        0x3C, //  ▓▓░░░░▓▓
        0xEE, //  ░░░▓░░░▓
        0x6E, //  ▓░░▓░░░▓
        0xDE, //  ░░▓░░░░▓
        0x6E, //  ▓░░▓░░░▓
        0xEE, //  ░░░▓░░░▓
        0x3C, //  ▓▓░░░░▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "\36w7o7w\36"[i%8]*2

    constexpr uint8_t crackedBoulder[] PROGMEM {
        8, 8, //  8x8 px image
        0x68, //  ▓░░▓░▓▓▓
        0x2C, //  ▓▓░▓░░▓▓
        0x90, //  ░▓▓░▓▓▓▓
        0xC6, //  ░░▓▓▓░░▓
        0xDE, //  ░░▓░░░░▓
        0x9C, //  ░▓▓░░░▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "4\26HcoN\30"[i%8]*2

    constexpr uint8_t bamboo[] PROGMEM {
        8, 8, //  8x8 px image
        0x10, //  ▓▓▓░▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0xDF, //  ░░▓░░░░░
        0x77, //  ▓░░░▓░░░
        0xFD, //  ░░░░░░▓░
        0x02, //  ▓▓▓▓▓▓░▓
        0x01, //  ▓▓▓▓▓▓▓░
        0x00, //  ▓▓▓▓▓▓▓▓
    };
    // Magic: "\20 \337w\375\2\1"[i%8]

}



#if 0
namespace patternsHorizontal {

    constexpr uint8_t scalesSparse[] PROGMEM {
        8, 8, //  8x8 px image
        0x7C, //  ▓░░░░░▓▓
        0x39, //  ▓▓░░░▓▓░
        0x83, //  ░▓▓▓▓▓░░
        0xC7, //  ░░▓▓▓░░░
        0xC7, //  ░░▓▓▓░░░
        0x93, //  ░▓▓░▓▓░░
        0x38, //  ▓▓░░░▓▓▓
        0x7C, //  ▓░░░░░▓▓
    };

    constexpr uint8_t scales[] PROGMEM {
        8, 8, //  8x8 px image
        0xFE, //  ░░░░░░░▓
        0x7D, //  ▓░░░░░▓░
        0x83, //  ░▓▓▓▓▓░░
        0xEF, //  ░░░▓░░░░
        0xEF, //  ░░░▓░░░░
        0xD7, //  ░░▓░▓░░░
        0x38, //  ▓▓░░░▓▓▓
        0xFE, //  ░░░░░░░▓
    };

    constexpr uint8_t scallop[] PROGMEM {
        8, 8, //  8x8 px image
        0xC6, //  ░░▓▓▓░░▓
        0x7D, //  ▓░░░░░▓░
        0x82, //  ░▓▓▓▓▓░▓
        0xAB, //  ░▓░▓░▓░░
        0x6C, //  ▓░░▓░░▓▓
        0xD7, //  ░░▓░▓░░░
        0x28, //  ▓▓░▓░▓▓▓
        0xBA, //  ░▓░░░▓░▓
    };

    constexpr uint8_t scalesLargeDexter[] PROGMEM {
        8, 8, //  8x8 px image
        0x7F, //  ▓░░░░░░░
        0x7F, //  ▓░░░░░░░
        0x7F, //  ▓░░░░░░░
        0xBF, //  ░▓░░░░░░
        0xBF, //  ░▓░░░░░░
        0xDF, //  ░░▓░░░░░
        0xA7, //  ░▓░▓▓░░░
        0x78, //  ▓░░░░▓▓▓
    };

    constexpr uint8_t scalesLargeSinister[] PROGMEM {
        8, 8, //  8x8 px image
        0xFE, //  ░░░░░░░▓
        0xFE, //  ░░░░░░░▓
        0xFE, //  ░░░░░░░▓
        0xFD, //  ░░░░░░▓░
        0xFD, //  ░░░░░░▓░
        0xFB, //  ░░░░░▓░░
        0xE5, //  ░░░▓▓░▓░
        0x1E, //  ▓▓▓░░░░▓
    };

    constexpr uint8_t papillon[] PROGMEM {
        8, 8, //  8x8 px image
        0x0E, //  ▓▓▓▓░░░▓
        0x3F, //  ▓▓░░░░░░
        0x7F, //  ▓░░░░░░░
        0x7D, //  ▓░░░░░▓░
        0xF6, //  ░░░░▓░░▓
        0xFA, //  ░░░░░▓░▓
        0xEC, //  ░░░▓░░▓▓
        0x70, //  ▓░░░▓▓▓▓
    };

    constexpr uint8_t loam[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x02, //  ▓▓▓▓▓▓░▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t sand[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x80, //  ░▓▓▓▓▓▓▓
        0x40, //  ▓░▓▓▓▓▓▓
        0x08, //  ▓▓▓▓░▓▓▓
        0x04, //  ▓▓▓▓▓░▓▓
        0x40, //  ▓░▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x02, //  ▓▓▓▓▓▓░▓
    };

    constexpr uint8_t patch[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x02, //  ▓▓▓▓▓▓░▓
        0x44, //  ▓░▓▓▓░▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t divot[] PROGMEM {
        8, 8, //  8x8 px image
        0x40, //  ▓░▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x40, //  ▓░▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x02, //  ▓▓▓▓▓▓░▓
        0x04, //  ▓▓▓▓▓░▓▓
        0x02, //  ▓▓▓▓▓▓░▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t grass[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x0A, //  ▓▓▓▓░▓░▓
        0x04, //  ▓▓▓▓▓░▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0xA0, //  ░▓░▓▓▓▓▓
        0x40, //  ▓░▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t grassMini[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0xAA, //  ░▓░▓░▓░▓
        0x44, //  ▓░▓▓▓░▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0xAA, //  ░▓░▓░▓░▓
        0x44, //  ▓░▓▓▓░▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t field[] PROGMEM {
        8, 8, //  8x8 px image
        0x11, //  ▓▓▓░▓▓▓░
        0x55, //  ▓░▓░▓░▓░
        0x55, //  ▓░▓░▓░▓░
        0x00, //  ▓▓▓▓▓▓▓▓
        0x22, //  ▓▓░▓▓▓░▓
        0xAA, //  ░▓░▓░▓░▓
        0xAA, //  ░▓░▓░▓░▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t fieldSparse[] PROGMEM {
        8, 8, //  8x8 px image
        0x01, //  ▓▓▓▓▓▓▓░
        0x05, //  ▓▓▓▓▓░▓░
        0x05, //  ▓▓▓▓▓░▓░
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0xA0, //  ░▓░▓▓▓▓▓
        0xA0, //  ░▓░▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t pasture[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x50, //  ▓░▓░▓▓▓▓
        0x50, //  ▓░▓░▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x0A, //  ▓▓▓▓░▓░▓
        0xAA, //  ░▓░▓░▓░▓
        0xA0, //  ░▓░▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t daisies[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x40, //  ▓░▓▓▓▓▓▓
        0xA0, //  ░▓░▓▓▓▓▓
        0x44, //  ▓░▓▓▓░▓▓
        0x0A, //  ▓▓▓▓░▓░▓
        0x04, //  ▓▓▓▓▓░▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t tuffet[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x04, //  ▓▓▓▓▓░▓▓
        0x48, //  ▓░▓▓░▓▓▓
        0x28, //  ▓▓░▓░▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t shrub[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x54, //  ▓░▓░▓░▓▓
        0x28, //  ▓▓░▓░▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t sprout[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x04, //  ▓▓▓▓▓░▓▓
        0x4C, //  ▓░▓▓░░▓▓
        0x68, //  ▓░░▓░▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t crop[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0xC6, //  ░░▓▓▓░░▓
        0x6C, //  ▓░░▓░░▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t bush[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x14, //  ▓▓▓░▓░▓▓
        0xCC, //  ░░▓▓░░▓▓
        0x68, //  ▓░░▓░▓▓▓
        0x28, //  ▓▓░▓░▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t leaves[] PROGMEM {
        8, 8, //  8x8 px image
        0x20, //  ▓▓░▓▓▓▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x12, //  ▓▓▓░▓▓░▓
        0x06, //  ▓▓▓▓▓░░▓
        0x04, //  ▓▓▓▓▓░▓▓
        0xC0, //  ░░▓▓▓▓▓▓
        0x60, //  ▓░░▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t overgrowth[] PROGMEM {
        8, 8, //  8x8 px image
        0x60, //  ▓░░▓▓▓▓▓
        0x63, //  ▓░░▓▓▓░░
        0x37, //  ▓▓░░▓░░░
        0x06, //  ▓▓▓▓▓░░▓
        0xC0, //  ░░▓▓▓▓▓▓
        0xE6, //  ░░░▓▓░░▓
        0x66, //  ▓░░▓▓░░▓
        0x0C, //  ▓▓▓▓░░▓▓
    };

    constexpr uint8_t thicket[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x54, //  ▓░▓░▓░▓▓
        0x28, //  ▓▓░▓░▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x7C, //  ▓░░░░░▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t tree[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x28, //  ▓▓░▓░▓▓▓
        0x54, //  ▓░▓░▓░▓▓
        0x28, //  ▓▓░▓░▓▓▓
        0x54, //  ▓░▓░▓░▓▓
        0x10, //  ▓▓▓░▓▓▓▓
        0x10, //  ▓▓▓░▓▓▓▓
    };

    constexpr uint8_t rocks[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x74, //  ▓░░░▓░▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t mounds[] PROGMEM {
        8, 8, //  8x8 px image
        0x60, //  ▓░░▓▓▓▓▓
        0x90, //  ░▓▓░▓▓▓▓
        0x06, //  ▓▓▓▓▓░░▓
        0x09, //  ▓▓▓▓░▓▓░
        0x00, //  ▓▓▓▓▓▓▓▓
        0x30, //  ▓▓░░▓▓▓▓
        0x48, //  ▓░▓▓░▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
    };

    constexpr uint8_t skull[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x00, //  ▓▓▓▓▓▓▓▓
        0x38, //  ▓▓░░░▓▓▓
        0x50, //  ▓░▓░▓▓▓▓
        0x68, //  ▓░░▓░▓▓▓
        0x02, //  ▓▓▓▓▓▓░▓
        0x04, //  ▓▓▓▓▓░▓▓
    };

    constexpr uint8_t skullLarge[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x38, //  ▓▓░░░▓▓▓
        0x7C, //  ▓░░░░░▓▓
        0x54, //  ▓░▓░▓░▓▓
        0x29, //  ▓▓░▓░▓▓░
        0x02, //  ▓▓▓▓▓▓░▓
        0x40, //  ▓░▓▓▓▓▓▓
        0x20, //  ▓▓░▓▓▓▓▓
    };

    constexpr uint8_t skullXL[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x7C, //  ▓░░░░░▓▓
        0xFE, //  ░░░░░░░▓
        0xFE, //  ░░░░░░░▓
        0x92, //  ░▓▓░▓▓░▓
        0xEE, //  ░░░▓░░░▓
        0x7C, //  ▓░░░░░▓▓
        0x54, //  ▓░▓░▓░▓▓
    };

    constexpr uint8_t crackedBoulder[] PROGMEM {
        8, 8, //  8x8 px image
        0x00, //  ▓▓▓▓▓▓▓▓
        0x18, //  ▓▓▓░░▓▓▓
        0x5C, //  ▓░▓░░░▓▓
        0xCC, //  ░░▓▓░░▓▓
        0x2E, //  ▓▓░▓░░░▓
        0xC2, //  ░░▓▓▓▓░▓
        0x98, //  ░▓▓░░▓▓▓
        0x3C, //  ▓▓░░░░▓▓
    };

    constexpr uint8_t bamboo[] PROGMEM {
        8, 8, //  8x8 px image
        0x3A, //  ▓▓░░░▓░▓
        0x34, //  ▓▓░░▓░▓▓
        0x38, //  ▓▓░░░▓▓▓
        0x28, //  ▓▓░▓░▓▓▓
        0xB8, //  ░▓░░░▓▓▓
        0x58, //  ▓░▓░░▓▓▓
        0x38, //  ▓▓░░░▓▓▓
        0x28, //  ▓▓░▓░▓▓▓
    };

}
#endif
